// Mocks generated by Mockito 5.4.0 from annotations
// in weather_app/test/features/home/data/repository/weather_repo_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/features/home/data/data_source/weather_local_data_source.dart'
    as _i9;
import 'package:weather_app/features/home/data/data_source/weather_remote_data_source.dart'
    as _i4;
import 'package:weather_app/features/home/data/models/geocode.dart' as _i7;
import 'package:weather_app/features/home/data/models/weather_response.dart'
    as _i5;
import 'package:weather_app/features/home/domain/params/geocode_params.dart'
    as _i8;
import 'package:weather_app/features/home/domain/params/weather_params.dart'
    as _i6;
import 'package:weather_app/utils/network/network_info.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [WeatherRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDataSource extends _i1.Mock
    implements _i4.WeatherRemoteDataSource {
  MockWeatherRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.WeatherResponse?> getWeather(_i6.WeatherParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeather,
          [params],
        ),
        returnValue: _i3.Future<_i5.WeatherResponse?>.value(),
      ) as _i3.Future<_i5.WeatherResponse?>);
  @override
  _i3.Future<_i7.GeoCode?> getGeoCode(_i8.GeoCodeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGeoCode,
          [params],
        ),
        returnValue: _i3.Future<_i7.GeoCode?>.value(),
      ) as _i3.Future<_i7.GeoCode?>);
}

/// A class which mocks [WeatherLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDataSource extends _i1.Mock
    implements _i9.WeatherLocalDataSource {
  MockWeatherLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i5.WeatherResponse?> getLastWeather() => (super.noSuchMethod(
        Invocation.method(
          #getLastWeather,
          [],
        ),
        returnValue: _i3.Future<_i5.WeatherResponse?>.value(),
      ) as _i3.Future<_i5.WeatherResponse?>);
  @override
  _i3.Future<_i7.GeoCode?> getLastGeoCode() => (super.noSuchMethod(
        Invocation.method(
          #getLastGeoCode,
          [],
        ),
        returnValue: _i3.Future<_i7.GeoCode?>.value(),
      ) as _i3.Future<_i7.GeoCode?>);
  @override
  _i3.Future<void> cacheWeather(_i5.WeatherResponse? weather) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheWeather,
          [weather],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> cacheGeoCode(_i7.GeoCode? geoCode) => (super.noSuchMethod(
        Invocation.method(
          #cacheGeoCode,
          [geoCode],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
