// Mocks generated by Mockito 5.4.0 from annotations
// in weather_app/test/features/home/presentation/bloc/weather_bloc.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:bloc/bloc.dart' as _i14;
import 'package:dartz/dartz.dart' as _i3;
import 'package:location/location.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app/features/home/data/models/geocode.dart' as _i11;
import 'package:weather_app/features/home/data/models/weather_response.dart'
    as _i9;
import 'package:weather_app/features/home/domain/params/geocode_params.dart'
    as _i12;
import 'package:weather_app/features/home/domain/params/weather_params.dart'
    as _i10;
import 'package:weather_app/features/home/domain/repository/weather_repo.dart'
    as _i2;
import 'package:weather_app/features/home/domain/usecases/get_geocode.dart'
    as _i5;
import 'package:weather_app/features/home/domain/usecases/get_weather.dart'
    as _i4;
import 'package:weather_app/features/home/presentation/bloc/weather_bloc.dart'
    as _i6;
import 'package:weather_app/utils/core/failures.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherRepo_0 extends _i1.SmartFake implements _i2.WeatherRepo {
  _FakeWeatherRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWeather_2 extends _i1.SmartFake implements _i4.GetWeather {
  _FakeGetWeather_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetGeoCode_3 extends _i1.SmartFake implements _i5.GetGeoCode {
  _FakeGetGeoCode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherState_4 extends _i1.SmartFake implements _i6.WeatherState {
  _FakeWeatherState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeather].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeather extends _i1.Mock implements _i4.GetWeather {
  MockGetWeather() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepo get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeWeatherRepo_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.WeatherRepo);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i9.WeatherResponse?>> call(
          _i10.WeatherParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i8.Failure, _i9.WeatherResponse?>>.value(
                _FakeEither_1<_i8.Failure, _i9.WeatherResponse?>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i9.WeatherResponse?>>);
}

/// A class which mocks [GetGeoCode].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetGeoCode extends _i1.Mock implements _i5.GetGeoCode {
  MockGetGeoCode() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WeatherRepo get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeWeatherRepo_0(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i2.WeatherRepo);
  @override
  _i7.Future<_i3.Either<_i8.Failure, _i11.GeoCode?>> call(
          _i12.GeoCodeParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i7.Future<_i3.Either<_i8.Failure, _i11.GeoCode?>>.value(
            _FakeEither_1<_i8.Failure, _i11.GeoCode?>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i8.Failure, _i11.GeoCode?>>);
}

/// A class which mocks [WeatherBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherBloc extends _i1.Mock implements _i6.WeatherBloc {
  MockWeatherBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetWeather get getWeather => (super.noSuchMethod(
        Invocation.getter(#getWeather),
        returnValue: _FakeGetWeather_2(
          this,
          Invocation.getter(#getWeather),
        ),
      ) as _i4.GetWeather);
  @override
  _i5.GetGeoCode get getGeoCode => (super.noSuchMethod(
        Invocation.getter(#getGeoCode),
        returnValue: _FakeGetGeoCode_3(
          this,
          Invocation.getter(#getGeoCode),
        ),
      ) as _i5.GetGeoCode);
  @override
  _i6.WeatherState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeWeatherState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.WeatherState);
  @override
  _i7.Stream<_i6.WeatherState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i6.WeatherState>.empty(),
      ) as _i7.Stream<_i6.WeatherState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i7.Future<_i13.LocationData?> getMyLocation() => (super.noSuchMethod(
        Invocation.method(
          #getMyLocation,
          [],
        ),
        returnValue: _i7.Future<_i13.LocationData?>.value(),
      ) as _i7.Future<_i13.LocationData?>);
  @override
  void add(_i6.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i6.WeatherEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i6.WeatherState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i6.WeatherEvent>(
    _i14.EventHandler<E, _i6.WeatherState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i14.Transition<_i6.WeatherEvent, _i6.WeatherState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  void onChange(_i14.Change<_i6.WeatherState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
